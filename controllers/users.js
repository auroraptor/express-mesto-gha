const bcrypt = require('bcryptjs');
const validator = require('validator');
const jwt = require('jsonwebtoken');
const User = require('../models/user');

const regex = /`\w+`/gi;
const { logNow } = require('../utils/log');
const { HttpStatusCode } = require('../utils/HttpStatusCode');

module.exports.createUser = async (req, res) => {
  try {
    if (!validator.isEmail(req.body.email)) {
      logNow('no email');
      throw new Error('401'); // TODO –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫
    }
    const hash = await bcrypt.hash(req.body.password, 17); // ìÉ¶ ‚ë∞ ‚ô°
    const user = await User.create({ ...req.body, password: hash });
    const {
      name, about, avatar, _id,
    } = user;
    logNow('[USER]: ', user);
    logNow({
      name, about, avatar, _id,
    });
    return res.status(HttpStatusCode.OK).send({
      name, about, avatar, _id,
    });
  } catch (error) {
    logNow(error.name);
    logNow(error.message);

    if (error.name === 'ValidationError') {
      return res.status(HttpStatusCode.BAD_REQUEST).send({ message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message.match(regex)}` });
    }

    if (error.message === '401') {
      return res.status(HttpStatusCode.UNAUTHORIZED).send({ message: '—ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª–µ email –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é' });
    }

    if (error.name === 'MongoServerError' || error.message.includes('11000')) {
      return res.status(HttpStatusCode.CONFLICT).send({ message: `${req.body.email} —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω` });
    }

    return res.status(HttpStatusCode.INTERNAL_SERVER).send({ message: '–¢—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫' });
  }
};

module.exports.getUsers = async (req, res) => {
  try {
    const users = await User.find({});
    return res.send({ users });
  } catch (error) {
    logNow(error.name);

    return res.status(HttpStatusCode.INTERNAL_SERVER).send({ message: '–¢—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫' });
  }
};

module.exports.getCurrentUser = async (req, res) => {
  logNow('user._id', req.user._id);
  logNow('params', req.user);
  try {
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(HttpStatusCode.NOT_FOUND).send({ message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${req.user._id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }
    return res.status(HttpStatusCode.OK).send(user);
  } catch (err) {
    return err;
  }
};

module.exports.getUserById = async (req, res) => {
  logNow('user._id', req.user._id);

  try {
    const user = await User.findById(req.params.id);
    if (user === null) {
      return res.status(HttpStatusCode.NOT_FOUND).json({ message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${req.params.id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }
    return res.send({ data: user });
  } catch (error) {
    logNow(error.name);

    if (error.name === 'CastError') {
      return res.status(HttpStatusCode.BAD_REQUEST).send({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å' });
    }

    return res.status(HttpStatusCode.INTERNAL_SERVER).send({ message: '–¢—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫' });
  }
};

module.exports.updateUser = async (req, res) => {
  try {
    await User.findByIdAndUpdate(req.user._id, req.body, {
      new: true,
      runValidators: true,
    });
    return res.send({ ...req.body });
  } catch (error) {
    logNow(error.name);

    if (error.name === 'ValidationError') {
      return res.status(HttpStatusCode.BAD_REQUEST).send({ message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message.match(regex)}` });
    }

    if (error.name === 'CastError') {
      return res.status(HttpStatusCode.BAD_REQUEST).send({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å' });
    }

    return res.status(HttpStatusCode.INTERNAL_SERVER).send({ message: '–¢—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫' });
  }
};

module.exports.updateAvatar = async (req, res) => {
  try {
    const { _id } = req.user;
    await User.findByIdAndUpdate(_id, req.body, {
      new: true,
      runValidators: true,
    });
    return res.status(HttpStatusCode.OK).send({ ...req.body });
  } catch (error) {
    logNow(error.name);

    if (error.name === 'ValidationError') {
      return res.status(HttpStatusCode.BAD_REQUEST).send({ message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message.match(regex)}` });
    }

    return res.status(HttpStatusCode.INTERNAL_SERVER).send({ message: '–¢—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫' });
  }
};

module.exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email }).select('+password');
    if (!user) {
      return res.status(HttpStatusCode.UNAUTHORIZED).send({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' });
    }
    const matched = bcrypt.compare(password, user.password);
    if (!matched) {
      return res.status(HttpStatusCode.UNAUTHORIZED).send({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' });
    }
    const token = jwt.sign({ _id: user._id }, 'üîê', { expiresIn: '7d' });
    return res.status(HttpStatusCode.OK).cookie('jwt', token, {
      maxAge: 3600000 * 24 * 7,
      httpOnly: true,
    }).send({ message: '–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ httpOnly –∫—É–∫—É' }).end();
  } catch (error) {
    return res.status(HttpStatusCode.INTERNAL_SERVER).send({ message: '–¢—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫' });
  }
};
